/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace GAME2048 {
  export type GameStruct = {
    gamerAddr: string;
    gameTime: BigNumberish;
    score: BigNumberish;
    lastBoardState: string;
    gameStatus: BigNumberish;
  };

  export type GameStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
    number
  ] & {
    gamerAddr: string;
    gameTime: BigNumber;
    score: BigNumber;
    lastBoardState: string;
    gameStatus: number;
  };
}

export interface GAME2048Interface extends utils.Interface {
  functions: {
    "getLeaderBoard()": FunctionFragment;
    "uploadRecord((address,uint256,uint256,string,uint8))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getLeaderBoard" | "uploadRecord"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getLeaderBoard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uploadRecord",
    values: [GAME2048.GameStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLeaderBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uploadRecord",
    data: BytesLike
  ): Result;

  events: {
    "fallbackcalled(address,uint256,bytes)": EventFragment;
    "gameUpload(address,(address,uint256,uint256,string,uint8))": EventFragment;
    "leaderBoardUpdate()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "fallbackcalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "gameUpload"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "leaderBoardUpdate"): EventFragment;
}

export interface fallbackcalledEventObject {
  sender: string;
  value: BigNumber;
  data: string;
}
export type fallbackcalledEvent = TypedEvent<
  [string, BigNumber, string],
  fallbackcalledEventObject
>;

export type fallbackcalledEventFilter = TypedEventFilter<fallbackcalledEvent>;

export interface gameUploadEventObject {
  sender: string;
  record: GAME2048.GameStructOutput;
}
export type gameUploadEvent = TypedEvent<
  [string, GAME2048.GameStructOutput],
  gameUploadEventObject
>;

export type gameUploadEventFilter = TypedEventFilter<gameUploadEvent>;

export interface leaderBoardUpdateEventObject {}
export type leaderBoardUpdateEvent = TypedEvent<
  [],
  leaderBoardUpdateEventObject
>;

export type leaderBoardUpdateEventFilter =
  TypedEventFilter<leaderBoardUpdateEvent>;

export interface GAME2048 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GAME2048Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getLeaderBoard(
      overrides?: CallOverrides
    ): Promise<[GAME2048.GameStructOutput[]]>;

    uploadRecord(
      record: GAME2048.GameStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getLeaderBoard(
    overrides?: CallOverrides
  ): Promise<GAME2048.GameStructOutput[]>;

  uploadRecord(
    record: GAME2048.GameStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getLeaderBoard(
      overrides?: CallOverrides
    ): Promise<GAME2048.GameStructOutput[]>;

    uploadRecord(
      record: GAME2048.GameStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "fallbackcalled(address,uint256,bytes)"(
      sender?: null,
      value?: null,
      data?: null
    ): fallbackcalledEventFilter;
    fallbackcalled(
      sender?: null,
      value?: null,
      data?: null
    ): fallbackcalledEventFilter;

    "gameUpload(address,(address,uint256,uint256,string,uint8))"(
      sender?: string | null,
      record?: null
    ): gameUploadEventFilter;
    gameUpload(sender?: string | null, record?: null): gameUploadEventFilter;

    "leaderBoardUpdate()"(): leaderBoardUpdateEventFilter;
    leaderBoardUpdate(): leaderBoardUpdateEventFilter;
  };

  estimateGas: {
    getLeaderBoard(overrides?: CallOverrides): Promise<BigNumber>;

    uploadRecord(
      record: GAME2048.GameStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLeaderBoard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uploadRecord(
      record: GAME2048.GameStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
