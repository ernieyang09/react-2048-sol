/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { GAME2048, GAME2048Interface } from "../GAME2048";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "fallbackcalled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "gamerAddr",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "gameTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "score",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "lastBoardState",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "gameStatus",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct GAME2048.Game",
        name: "record",
        type: "tuple",
      },
    ],
    name: "gameUpload",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "leaderBoardUpdate",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "getLeaderBoard",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "gamerAddr",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "gameTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "score",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "lastBoardState",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "gameStatus",
            type: "uint8",
          },
        ],
        internalType: "struct GAME2048.Game[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "gamerAddr",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "gameTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "score",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "lastBoardState",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "gameStatus",
            type: "uint8",
          },
        ],
        internalType: "struct GAME2048.Game",
        name: "record",
        type: "tuple",
      },
    ],
    name: "uploadRecord",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060056000800160006101000a81548160ff021916908360ff1602179055506112978061003e6000396000f3fe60806040526004361061002d5760003560e01c80639b2465f51461006e578063c29d72bc146100975761002e565b5b7f0652e8fd2c593a5d68c0a3e46444e712ab5a8cf89f700c3c53e8a7f7dc0ca4fd333460003660405161006494939291906107ce565b60405180910390a1005b34801561007a57600080fd5b5061009560048036038101906100909190610a8b565b6100c2565b005b3480156100a357600080fd5b506100ac61011c565b6040516100b99190610cb8565b60405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff167f5558978bb9c45b405c743e102b3fb83d8bfe3abf97c1869ecb8444ba712e3962826040516101089190610d50565b60405180910390a261011981610297565b50565b60606000600101805480602002602001604051908101604052809291908181526020016000905b8282101561028e57838290600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820180546101e090610da1565b80601f016020809104026020016040519081016040528092919081815260200182805461020c90610da1565b80156102595780601f1061022e57610100808354040283529160200191610259565b820191906000526020600020905b81548152906001019060200180831161023c57829003601f168201915b505050505081526020016004820160009054906101000a900460ff1660ff1660ff168152505081526020019060010190610143565b50505050905090565b600060020160009054906101000a900463ffffffff1663ffffffff168160400151106106b65760008060010190508082908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030190816103609190610f7e565b5060808201518160040160006101000a81548160ff021916908360ff16021790555050506000805b82805490508160ff1610156103e8578360400151838260ff16815481106103b2576103b1611050565b5b90600052602060002090600502016002015410156103d5578060ff1691506103e8565b80806103e0906110ae565b915050610388565b506000600183805490506103fc91906110d7565b90505b81811115610529578260018261041591906110d7565b8154811061042657610425611050565b5b906000526020600020906005020183828154811061044757610446611050565b5b90600052602060002090600502016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820154816001015560028201548160020155600382018160030190816104e49190611121565b506004820160009054906101000a900460ff168160040160006101000a81548160ff021916908360ff160217905550905050808061052190611209565b9150506103ff565b508282828154811061053e5761053d611050565b5b906000526020600020906005020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030190816105bc9190610f7e565b5060808201518160040160006101000a81548160ff021916908360ff1602179055509050506000800160009054906101000a900460ff1660ff1682805490501115610687578180548061061257610611611232565b5b6001900381819060005260206000209060050201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055600282016000905560038201600061066e91906106b9565b6004820160006101000a81549060ff0219169055505090555b7faaa601b2c3d318d67770afe4e7e017a4f2119912c3b997550a68ce1dc58ea6d260405160405180910390a150505b50565b5080546106c590610da1565b6000825580601f106106d757506106f6565b601f0160209004906000526020600020908101906106f591906106f9565b5b50565b5b808211156107125760008160009055506001016106fa565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061074182610716565b9050919050565b61075181610736565b82525050565b6000819050919050565b61076a81610757565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006107ad8385610770565b93506107ba838584610781565b6107c383610790565b840190509392505050565b60006060820190506107e36000830187610748565b6107f06020830186610761565b81810360408301526108038184866107a1565b905095945050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61085f82610790565b810181811067ffffffffffffffff8211171561087e5761087d610827565b5b80604052505050565b600061089161080e565b905061089d8282610856565b919050565b600080fd5b6108b081610736565b81146108bb57600080fd5b50565b6000813590506108cd816108a7565b92915050565b6108dc81610757565b81146108e757600080fd5b50565b6000813590506108f9816108d3565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff82111561092457610923610827565b5b61092d82610790565b9050602081019050919050565b600061094d61094884610909565b610887565b90508281526020810184848401111561096957610968610904565b5b610974848285610781565b509392505050565b600082601f830112610991576109906108ff565b5b81356109a184826020860161093a565b91505092915050565b600060ff82169050919050565b6109c0816109aa565b81146109cb57600080fd5b50565b6000813590506109dd816109b7565b92915050565b600060a082840312156109f9576109f8610822565b5b610a0360a0610887565b90506000610a13848285016108be565b6000830152506020610a27848285016108ea565b6020830152506040610a3b848285016108ea565b604083015250606082013567ffffffffffffffff811115610a5f57610a5e6108a2565b5b610a6b8482850161097c565b6060830152506080610a7f848285016109ce565b60808301525092915050565b600060208284031215610aa157610aa0610818565b5b600082013567ffffffffffffffff811115610abf57610abe61081d565b5b610acb848285016109e3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610b0981610736565b82525050565b610b1881610757565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b58578082015181840152602081019050610b3d565b60008484015250505050565b6000610b6f82610b1e565b610b798185610b29565b9350610b89818560208601610b3a565b610b9281610790565b840191505092915050565b610ba6816109aa565b82525050565b600060a083016000830151610bc46000860182610b00565b506020830151610bd76020860182610b0f565b506040830151610bea6040860182610b0f565b5060608301518482036060860152610c028282610b64565b9150506080830151610c176080860182610b9d565b508091505092915050565b6000610c2e8383610bac565b905092915050565b6000602082019050919050565b6000610c4e82610ad4565b610c588185610adf565b935083602082028501610c6a85610af0565b8060005b85811015610ca65784840389528151610c878582610c22565b9450610c9283610c36565b925060208a01995050600181019050610c6e565b50829750879550505050505092915050565b60006020820190508181036000830152610cd28184610c43565b905092915050565b600060a083016000830151610cf26000860182610b00565b506020830151610d056020860182610b0f565b506040830151610d186040860182610b0f565b5060608301518482036060860152610d308282610b64565b9150506080830151610d456080860182610b9d565b508091505092915050565b60006020820190508181036000830152610d6a8184610cda565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610db957607f821691505b602082108103610dcc57610dcb610d72565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610e347fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610df7565b610e3e8683610df7565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610e7b610e76610e7184610757565b610e56565b610757565b9050919050565b6000819050919050565b610e9583610e60565b610ea9610ea182610e82565b848454610e04565b825550505050565b600090565b610ebe610eb1565b610ec9818484610e8c565b505050565b5b81811015610eed57610ee2600082610eb6565b600181019050610ecf565b5050565b601f821115610f3257610f0381610dd2565b610f0c84610de7565b81016020851015610f1b578190505b610f2f610f2785610de7565b830182610ece565b50505b505050565b600082821c905092915050565b6000610f5560001984600802610f37565b1980831691505092915050565b6000610f6e8383610f44565b9150826002028217905092915050565b610f8782610b1e565b67ffffffffffffffff811115610fa057610f9f610827565b5b610faa8254610da1565b610fb5828285610ef1565b600060209050601f831160018114610fe85760008415610fd6578287015190505b610fe08582610f62565b865550611048565b601f198416610ff686610dd2565b60005b8281101561101e57848901518255600182019150602085019450602081019050610ff9565b8683101561103b5784890151611037601f891682610f44565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110b9826109aa565b915060ff82036110cc576110cb61107f565b5b600182019050919050565b60006110e282610757565b91506110ed83610757565b92508282039050818111156111055761110461107f565b5b92915050565b60008154905061111a81610da1565b9050919050565b81810361112f575050611207565b6111388261110b565b67ffffffffffffffff81111561115157611150610827565b5b61115b8254610da1565b611166828285610ef1565b6000601f8311600181146111955760008415611183578287015490505b61118d8582610f62565b865550611200565b601f1984166111a387610dd2565b96506111ae86610dd2565b60005b828110156111d6578489015482556001820191506001850194506020810190506111b1565b868310156111f357848901546111ef601f891682610f44565b8355505b6001600288020188555050505b5050505050505b565b600061121482610757565b9150600082036112275761122661107f565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212203d21237574bad7fafb2fc9718d2b47a28e6ce9bb71b907694d2f907a42211b0064736f6c63430008130033";

type GAME2048ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GAME2048ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GAME2048__factory extends ContractFactory {
  constructor(...args: GAME2048ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<GAME2048> {
    return super.deploy(overrides || {}) as Promise<GAME2048>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GAME2048 {
    return super.attach(address) as GAME2048;
  }
  override connect(signer: Signer): GAME2048__factory {
    return super.connect(signer) as GAME2048__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GAME2048Interface {
    return new utils.Interface(_abi) as GAME2048Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GAME2048 {
    return new Contract(address, _abi, signerOrProvider) as GAME2048;
  }
}
